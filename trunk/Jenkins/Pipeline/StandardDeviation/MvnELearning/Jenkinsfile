node ("$JenkinNodeID") {
         
  try {
        stage ('Code Checkout') {
          /* groovylint-disable-next-line TrailingComma */
          checkout([
             $class: 'SubversionSCM',

              additionalCredentials: [],

              excludedCommitMessages: '',

              excludedRegions: '',

              excludedRevprop: '',

              excludedUsers: '',

              filterChangelog: false,

              ignoreDirPropChanges: false,

              includedRegions: '',

                locations: [[cancelProcessOnExternalsFail: true,

                  credentialsId: "$SCM_Cred_ID",

                  depthOption: 'infinity',

                  ignoreExternalsOption: true,

                  local: '.',

                  remote: '$SCM_checkout']],

                quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
          }
    
        stage ('Application Build Packaging') {
          stageName = 'Application Build Packaging'
          sh '''
           cd master/ && \		  
		  /usr/lib/maven354/bin/mvn clean install -Dmaven.test.skip=true && \
		  cd .. && \
         /usr/lib/maven354/bin/mvn clean install -Dmaven.test.skip=true &&  \
		 mkdir $BuildName && \
		 find -iname '*.war' -exec cp {} $BuildName/ \; 
		 '''
		  
          }
		  stage ('Package Build Libraries') {
            stageName = 'Package Client Libraries'
            zip archive: true, dir: "$BuildName/", glob: '', zipFile: "$BuildName"+'.zip'
            }

        stage ('Update Nexus Repo Latest Snapshot') {

              nexustarget = 'http://'+"$NexusUrl"+'/repository/'+"$NexusRepoID"+'/Dev/latest/'+"$Artifact_Product"+'/'+"$BuildName"+'.zip'
              finalOut = "$BuildName"+'.zip'+' '+"${nexustarget}"
              echo "${nexustarget}"
              echo "${finalOut}"
        }
          currentBuild.result = 'SUCCESS'
          }
          catch (e) { 
            currentBuild.result = 'FAILURE'
              Builderror = "${e}"
              stage ('Report Error Status into JIRA') {
                summarymsg = 'Application '+"${AppBuildName}"+' Build Failure in ' + "${stageName}" + ' Stage, Please take action Immediatly'
                descriptionmsg = 'Build failure due to ' + "${Builderror}"+' Refer Jenkin Job'+"${env.JOB_NAME}"
                echo "${Builderror}"
                echo "${summarymsg}"
                echo "${descriptionmsg}"
                echo "${JIRAProjecKey}"
                  def issue = [fields: [ project: [key: "${JIRAProjecKey}"],
                      summary:  "${summarymsg}",
                      description: "${descriptionmsg}",
                      issuetype: [name: 'Bug'],
                      assignee: [id: "${JiraDeveloperID}"]]]
                  response = jiraNewIssue issue: issue, site: "${JiraSite}"
                  echo response.successful.toString()
                  echo response.data.toString()
              }
            }
            finally {
              stage ('Updation of Build Status into JIRA') {
                echo currentBuild.result
                jiraSendBuildInfo branch: "${JIRAIssueKey}", site: 'trinitymobilitypvtltd.atlassian.net'
              }
              stage ('Finishing: Sitback and Relax')
              {
              cleanWs() 
              }
              }
              }