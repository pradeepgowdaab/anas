pipeline {
    agent { label "$JenkinNodeID" }
    stages {
        stage('Build and Deploy Automation') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    build 'Automation'
                }
            }
        }
        stage('Build and Deploy App') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    build "${TriggerJob}"
                }
            }
        }
        stage('Zaptesting') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh ''' mkdir -p out && \
                    chmod -R 777 out && \
                    docker run -v $(pwd)/out:/zap/wrk/:rw -t owasp/zap2docker-stable \
                    zap-baseline.py -t $Application_BaseUrl \
                    -g gen.conf -d -r zap_scan_report.html --hook=/zap/auth_hook.py || error=true '''
            }
			}
        }
        }
		post {
       success{
           script {
		    sh '''cd $Notification_Script 
			/usr/bin/ansible-playbook -i hosts site.yml --e smtphost="${smtphost}" -e smtpport="${smtpport}" -e smtpUser="${smtpUser}" -e smtpPass="${smtpPass}" -e to="${API_To}" -e cc="${API_CC}" -e subject="${EmailSubject}" -e body="${Emailmessagebody}" -vvvv'''
		    sh 'curl -v -u $Nexus_Username:$Nexus_Password --upload-file $Zap_Output $Zap_Nexus_Url || error=true'
			sh '''curl -u admin:TrInItY123 http://192.168.1.143:8081/repository/HKPFSAF/Dev/Automation/sonar-cnes-report-3.2.2.jar -o sonar-cnes-report-3.2.2.jar
                  java -jar $ReportJAR -t $SonarSecID -s $SonarQubeUrl -p $SonarProjectID -r $SonarProjectID.docx 
                  curl -v -u admin:TrInItY123 --upload-file *.docx http://$NexusHost/repository/$ProjectID/Dev/StaticAnalysis/$SonarProjectID.docx'''
                 def issue = [fields: [ project: [key: "${JIRAProjecKey}"],
                      summary:  'Application Nightly Build '+"${BuildName}"+' is successful, Initiate QA Validation',
                      description: 'Application is Deployed successfully and test execusion was successful, \n Refer Testlink Automation Report: \t'+ "${Report_Url}"+'\n Refer ZapProxy Automation Report: \t'+ "${Zap_Nexus_Url}",
                      issuetype: [name: 'Task'],
                      labels: ['Jenkins','BuildSuccess'],
                      assignee: [id: "${JiraDeveloperID}"]]]
                  response = jiraNewIssue issue: issue, site: "${JiraSite}"
                  echo response.successful.toString()
                  echo response.data.toString()
                }
            }
            failure {
                script {
				sh '''cd $Notification_Script 
				/usr/bin/ansible-playbook -i fail-hosts site.yml --e smtphost="${smtphost}" -e smtpport="${smtpport}" -e smtpUser="${smtpUser}" -e smtpPass="${smtpPass}" -e to="${API_To}" -e cc="${API_CC}" -e subject="${Fail_EmailSubject}" -e body="${Fail_Emailmessagebody}" -vvvv'''
		        sh 'curl -v -u $Nexus_Username:$Nexus_Password --upload-file $Zap_Output $Zap_Nexus_Url || error=true'
				sh '''curl -u admin:TrInItY123 http://192.168.1.143:8081/repository/HKPFSAF/Dev/Automation/sonar-cnes-report-3.2.2.jar -o sonar-cnes-report-3.2.2.jar
                  java -jar $ReportJAR -t $SonarSecID -s $SonarQubeUrl -p $SonarProjectID -r $SonarProjectID.docx  
                  curl -v -u admin:TrInItY123 --upload-file *.docx http://$NexusHost/repository/$ProjectID/Dev/StaticAnalysis/$SonarProjectID.docx'''
                  def issue = [fields: [ project: [key: "${JIRAProjecKey}"],
                      summary:  'Application Build '+"${BuildName}"+' & QA Deployment failed',
                      description: 'Application is Deployment Failure , \n Refer Testlink Automation Report: \t'+ "${Report_Url}"+'\n Refer ZapProxy Automation Report: \t'+ "${Zap_Nexus_Url}",
                      issuetype: [name: 'Bug'],
                      labels: ['Jenkins','BuildFailure'],
                      assignee: [id: "${JiraDeveloperID}"]]]
                  response = jiraNewIssue issue: issue, site: "${JiraSite}"
                  echo response.successful.toString()
                  echo response.data.toString()
                }
            }
        }
}