node ("$JenkinNodeID")
 {
  try {
        stage ('Code Checkout') {
          checkout([
             $class: 'SubversionSCM',

              additionalCredentials: [],

              excludedCommitMessages: '',

              excludedRegions: '',

              excludedRevprop: '',

              excludedUsers: '',

              filterChangelog: false,

              ignoreDirPropChanges: false,

              includedRegions: '',

                locations: [[cancelProcessOnExternalsFail: true,

                  credentialsId: "$SCM_Cred_ID",

                  depthOption: 'infinity',

                  ignoreExternalsOption: true,

                  local: '.',

                  remote: '$SCM_checkout']],

                quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
          }

        stage ('npm Dependencies Installation') {
            stageName = 'npm Dependencies Installation'
             sh '''npm update "$npmBuildParam" && npm install "$npmBuildParam" && \
                  npm install moment@$momentV && npm install moment-timezone@$momenttimezoneV'''
             }
                                 
             

        stage ('Complie, Build Client Libraries') {
            stageName = 'Build Execution'
             sh '/usr/local/bin/node $max_old_space_size node_modules/@angular/cli/bin/ng build --aot --configuration=production --output-hashing=all --source-map=false --extract-css=true --named-chunks=false --build-optimizer=false'
            }
       stage ('Static Code Analysis & Coverage Validation') {
            stageName = 'Static Code Analysis'
            withSonarQubeEnv('sonar') {
            sh '''cd ${WORKSPACE} && "$SonarScannerDir" -Dsonar.projectBaseDir="${WORKSPACE}" \
            -Dsonar.projectKey="$sonarprojectName" \
            -Dsonar.projectName="$sonarprojectName" \
            -Dsonar.host.url="$sonarhosturl" \
            -Dsonar.login="$sonarlogin" \
            -Dsonar.password="$sonarpassword" \
            -Dsonar.scm.enabled=true \
            -Dsonar.scm.provider=svn \
            -Dsonar.svn.username="$sonarsvnusername" \
            -Dsonar.svn.password.secured="$sonarsvnpasswordsecured" \
            -Dsonar.exclusions="$sonarexclusions" \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.junit.reportsPath=target/surefire-reports \
            -Dsonar.jacoco.reportPath=target/jacoco.exec \
            -Dsonar.cobertura.reportPath=target/site/jacoco/jacoco.xml'''
          }
          }
	   echo"$isQGValidationReq"
        if("$isQGValidationReq" == 'true')
        stage ('Quality Gate Validation') {
          stageName = 'Quality Gate'
          def qg = waitForQualityGate()
          timeout(time: 1, unit: 'HOURS') {
            echo '$qg'
            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
        }
    stage ('Package Client Libraries') {
            stageName = 'Package Client Libraries'
            zip archive: true, dir: 'dist/'+"$BuildName", glob: '', zipFile: "$BuildName"+'.war'
            }
        echo"$isDeploymentReq"
        if("$isDeploymentReq" == 'true')
        {
        stage ('Deployment to QA Environment') {
          stageName = 'Deployment to QA Environment'
          deploy adapters: [tomcat8(credentialsId: "$tomcatToken",
          url: "$tomcatUrl")],
          contextPath: "$contextPath",
          war: '**/*.war'
        }
        }
		echo"$isTestJoBTriggerReq"
        if("$isTestJoBTriggerReq" == 'true')
		stage ('Build TestAutomation JOB') {
          stageName = 'Build TestAutomation JOB'
          build 'Automation'
          }
		  echo"$isTestingReq"
        if("$isTestingReq" == 'true')
		stage ('Intiate TestAutomation') {
          stageName = 'Intiate TestAutomation'
          sh '''
			/usr/bin/ansible-playbook -i $hostspath $ansibleplaybook --e TargetMachine="${TargetMachine}" -e ansible_user="${ansible_user}" -e ansible_password="${ansible_password}" -e Param_config="${Param_config}" -e Param_XVaultToken="${Param_XVaultToken}" -e token="${token}" -e vault_conf="${vault_conf}" -e drive="${drive}" -e testAutomationFramework_Directory="${testAutomationFramework_Directory}" -e Projectcode="${Projectcode}" -e ProjectPlanecode="${ProjectPlanecode}" -e TESTLINK_API_PYTHON_SERVER_URL="${TESTLINK_API_PYTHON_SERVER_URL}" -e TESTLINK_API_PYTHON_DEVKEY="${TESTLINK_API_PYTHON_DEVKEY}" -e jar="${jar}" -e async="${async}" -e poll="${poll}" -e async_Result="${async_Result}" -e poll_Result="${poll_Result}" -e Nexusurl="${NexusUrl} -e Product="${BuildName} -e NexusUser="${NexusUserID} -e Password="${NexusUserPass}" -e Project_Build="${Project_Build} -e SpID="${SpID}" -e NexusRepoID="${NexusRepoID}" -vvvv'''
          }
		echo"$isZaPTestReqWithLogin"
        if("$isZaPTestReqWithLogin" == 'true')
		stage ('Intiate Zaptesting') {
          stageName = 'Intiate Zaptesting'
          sh ''' mkdir -p out && \
                    chmod -R 777 out && \
                    docker run -v $(pwd)/out:/zap/wrk/:rw -t owasp/zap2docker-stable \
                    zap-baseline.py -t $Application_BaseUrl \
                    -g gen.conf -d -r zap_scan_report.html --hook=/zap/auth_hook.py \
                    -z "auth.loginurl=$Applicat_authloginurl \
                    auth.username="$Application_authusername" auth.password="$Application_authpassword" auth.auto=1" || error=true '''
          }
		  echo"$isZaPTestReqWithoutLogin"
        if("$isZaPTestReqWithoutLogin" == 'true')
		stage ('Initiate Zaptesting') {
          stageName = 'Initiate Zaptesting'
          sh ''' mkdir -p out && \
                    chmod -R 777 out && \
                    docker run -v $(pwd)/out:/zap/wrk/:rw -t owasp/zap2docker-stable \
                    zap-baseline.py -t $Application_BaseUrl \
                    -g gen.conf -d -r zap_scan_report.html --hook=/zap/auth_hook.py || error=true '''
          }
		  echo"$isReqCodeCoverageWindows"
        if("$isReqCodeCoverageWindows" == 'true')
		stage ('Initiate CodeCoverage') {
          stageName = 'Initiate CodeCoverage'
          sh '''/usr/bin/ansible-playbook -i $hostspathCodeCoverageReport $ansibleplaybookCodeCoverageReport --e TargetMachine="${WCoverageTargetMachine}" -e ansible_user="${ansible_user}" -e ansible_password="${ansible_password}" -e drive="${drive}" -e Codecoverage="${Codecoverage}" -e zip="${zip}" -e Service="${Service}" -e TomcatPath="${TomcatPath}" -e Nexusurl="${NexusUrl}" -e NexusRepoID="${NexusRepoID}" -e Product="${BuildName}" -e NexusUser="${NexusUserID}" -e Password="${NexusUserPass}" -e Env="${Env}" -e BuildName="${BuildName}" -e ModeofOperation="${ModeofOperation}" -vvvv'''
          }
		  echo"$isReqCodeCoverageUbuntu"
        if("$isReqCodeCoverageUbuntu" == 'true')
		  stage('CodeCoverage') {
          sh'''/usr/bin/sshpass -p "$remotepassword" ssh $remoteuser@$remotehost "curl -u $NexusUserID:$NexusUserPass http://$NexusUrl/repository/Continuous_Integration/AutomationTesting/$zip.zip  -o $ubuntucoberturaPath/$zip.zip"'''
		  sh'''
         /usr/bin/sshpass -p "$remotepassword" ssh $remoteuser@$remotehost "unzip  -o $ubuntucoberturaPath/$zip.zip -d /opt/"'''
		 sh'''
         /usr/bin/sshpass -p "$remotepassword" ssh $remoteuser@$remotehost "chmod -R 777 $ubuntucoberturaPath/$zip"'''
		  sh'''
         /usr/bin/sshpass -p "$remotepassword" ssh $remoteuser@$remotehost "sh $ubuntucoberturaPath/$UbuntuTomcatFolder/bin/shutdown.sh"'''
		 sh'''sleep 1m'''
		 sh'''
         /usr/bin/sshpass -p "$remotepassword" ssh $remoteuser@$remotehost "$ubuntucoberturaPath/$zip/cobertura-report.sh --format html --datafile $ubuntucoberturaPath/$UbuntuTomcatFolder/bin/cobertura.ser --destination $ubuntucoberturaPath/$zip/$BuildName-Coverage [JAVA-SOURCE]"'''
		 sh'''
        /usr/bin/sshpass -p "$remotepassword" ssh $remoteuser@$remotehost "zip -r $ubuntucoberturaPath/$zip/$BuildName-Coverage.zip $ubuntucoberturaPath/$zip/$BuildName-Coverage"'''
		sh'''
        /usr/bin/sshpass -p "$remotepassword" ssh $remoteuser@$remotehost "curl -v -u $NexusUserID:$NexusUserPass --upload-file $ubuntucoberturaPath/$zip/$BuildName-Coverage.zip http://$NexusUrl/repository/$NexusRepoID/$Env/$ModeofOperation/$BuildName/$BuildName.zip"'''
		sh'''
         /usr/bin/sshpass -p "$remotepassword" ssh $remoteuser@$remotehost "sh $ubuntucoberturaPath/$UbuntuTomcatFolder/bin/catalina.sh start"'''
            }
          if("$NexusRepoReq" == 'true')
              {
        stage ('Update Nexus Repo Latest Snapshot') {

              nexustarget = 'http://'+"$NexusUrl"+'/repository/'+"$NexusRepoID"+'/QA/latest/'+"$Artifact_Product"+'/'+"$BuildName"+'.war'
              finalOut = "$BuildName"+'.war'+' '+"${nexustarget}"
              echo "${nexustarget}"
              echo "${finalOut}"

          sh 'curl -v -u "$NexusUserID":"$NexusUserPass" --upload-file '+"${finalOut}"
          }
              }
          currentBuild.result = 'SUCCESS'
		  sh '''
		  export ANSIBLE_HOST_KEY_CHECKING=False
		  cd $Notification_Script 
			/usr/bin/ansible-playbook -i hosts site.yml --e smtphost="${smtphost}" -e smtpport="${smtpport}" -e smtpUser="${smtpUser}" -e smtpPass="${smtpPass}" -e to="${API_To}" -e cc="${API_CC}" -e subject="${EmailSubject}" -e body="${Emailmessagebody}" -vvvv'''
		    sh 'curl -v -u $Nexus_Username:$Nexus_Password --upload-file $Zap_Output $Zap_Nexus_Url || error=true'
			sh '''curl -u admin:TrInItY123 http://192.168.1.143:8081/repository/HKPFSAF/Dev/Automation/sonar-cnes-report-3.2.2.jar -o sonar-cnes-report-3.2.2.jar
                  java -jar $ReportJAR -t $SonarSecID -s $SonarQubeUrl -p $SonarProjectID -r $SonarProjectID.docx 
                  curl -v -u admin:TrInItY123 --upload-file *.docx http://$NexusHost/repository/$ProjectID/Dev/StaticAnalysis/$SonarProjectID.docx'''
               /*  def issue = [fields: [ project: [key: "${JIRAProjecKey}"],
                      summary:  'Application Nightly Build '+"${BuildName}"+' is successful, Initiate QA Validation',
                      description: 'Application is Deployed successfully and test execusion was successful, \n Refer Testlink Automation Report: \t'+ "${Report_Url}"+'\n Refer ZapProxy Automation Report: \t'+ "${Zap_Nexus_Url}",
                      issuetype: [name: 'Task'],
                      labels: ['Jenkins','BuildSuccess'],
                      assignee: [id: "${JiraQAOwnerID}"]]]
                  response = jiraNewIssue issue: issue, site: "${JiraSite}"
                  echo response.successful.toString()
                  echo response.data.toString()
				  */
          }
           catch (e) { 
            currentBuild.result = 'FAILURE'
              Builderror = "${e}"
              stage ('Report Error Status into JIRA') {
			  sh '''
			  export ANSIBLE_HOST_KEY_CHECKING=False
			  cd $Notification_Script 
				/usr/bin/ansible-playbook -i fail-hosts site.yml --e smtphost="${smtphost}" -e smtpport="${smtpport}" -e smtpUser="${smtpUser}" -e smtpPass="${smtpPass}" -e to="${API_To}" -e cc="${API_CC}" -e subject="${Fail_EmailSubject}" -e body="${Fail_Emailmessagebody}" -vvvv'''
            /*    summarymsg = 'Application '+"${BuildName}"+' Build Failure in ' + "${stageName}" + ' Stage, Please take action Immediatly'
                descriptionmsg = 'Build failure due to ' + "${Builderror}"+' Refer Jenkin Job'+"${env.JOB_NAME}"
                echo "${Builderror}"
                echo "${summarymsg}"
                echo "${descriptionmsg}"
                echo "${JIRAProjecKey}"
                  def issue = [fields: [ project: [key: "${JIRAProjecKey}"],
                      summary:  "${summarymsg}",
                      description: "${descriptionmsg}",
                      issuetype: [name: 'Bug'],
                      assignee: [id: "${JiraDeveloperID}"]]]
                  response = jiraNewIssue issue: issue, site: "${JiraSite}"
                  echo response.successful.toString()
                  echo response.data.toString()
				  */
              }
            }
            finally {
              stage ('Updation of Build Status into JIRA') {
                echo currentBuild.result
                jiraSendBuildInfo branch: "${JIRAIssueKey}", site: 'trinitymobilitypvtltd.atlassian.net'
              }
              stage ('Finishing: Sitback and Relax')
              {
              cleanWs() 
              }
              }
  }