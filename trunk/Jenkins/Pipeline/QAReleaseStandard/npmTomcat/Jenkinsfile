node ("$JenkinNodeID")
 {
  try {
        stage ('Code Checkout') {
          checkout([
             $class: 'SubversionSCM',

              additionalCredentials: [],

              excludedCommitMessages: '',

              excludedRegions: '',

              excludedRevprop: '',

              excludedUsers: '',

              filterChangelog: false,

              ignoreDirPropChanges: false,

              includedRegions: '',

                locations: [[cancelProcessOnExternalsFail: true,

                  credentialsId: "$SCM_Cred_ID",

                  depthOption: 'infinity',

                  ignoreExternalsOption: true,

                  local: '.',

                  remote: '$SCM_checkout']],

                quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
          }

        stage ('npm Dependencies Installation') {
            stageName = 'npm Dependencies Installation'
            sh '''npm update "$npmBuildParam" && npm install "$npmBuildParam" && \
                  npm install -D typescript && \
                  npm install'''
             }

        stage ('Complie, Build Client Libraries') {
            stageName = 'Build Execution'
            sh 'npm run ng build "$ngBuildParam"'
            }
       stage ('Static Code Analysis & Coverage Validation') {
            stageName = 'Static Code Analysis'
            withSonarQubeEnv('sonar') {
            sh '''cd ${WORKSPACE} && "$SonarScannerDir" -Dsonar.projectBaseDir="${WORKSPACE}" \
            -Dsonar.projectKey="$sonarprojectName" \
            -Dsonar.projectName="$sonarprojectName" \
            -Dsonar.host.url="$sonarhosturl" \
            -Dsonar.login="$sonarlogin" \
            -Dsonar.password="$sonarpassword" \
            -Dsonar.scm.enabled=true \
            -Dsonar.scm.provider=svn \
            -Dsonar.svn.username="$sonarsvnusername" \
            -Dsonar.svn.password.secured="$sonarsvnpasswordsecured" \
            -Dsonar.exclusions="$sonarexclusions" \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.junit.reportsPath=target/surefire-reports \
            -Dsonar.jacoco.reportPath=target/jacoco.exec \
            -Dsonar.cobertura.reportPath=target/site/jacoco/jacoco.xml'''
          }
          }
	   echo"$isQGValidationReq"
        if("$isQGValidationReq" == 'true')
        stage ('Quality Gate Validation') {
          stageName = 'Quality Gate'
          def qg = waitForQualityGate()
          timeout(time: 1, unit: 'HOURS') {
            echo '$qg'
            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
        }


        stage ('Package Client Libraries') {
            stageName = 'Package Client Libraries'
            zip archive: true, dir: 'dist/'+"$BuildName", glob: '', zipFile: "$BuildName"+'.war'
            }
        echo"$isDeploymentReq"
        if("$isDeploymentReq" == 'true')
        {
        stage ('Deployment to QA Environment') {
          stageName = 'Deployment to QA Environment'
          deploy adapters: [tomcat8(credentialsId: "$tomcatToken",
          url: "$tomcatUrl")],
          contextPath: "$contextPath",
          war: '**/*.war'
        }
        }
          if("$NexusRepoReq" == 'true')
              {
        stage ('Update Nexus Repo Latest Snapshot') {

              nexustarget = 'http://'+"$NexusUrl"+'/repository/'+"$NexusRepoID"+'/QA/latest/'+"$Artifact_Product"+'/'+"$BuildName"+'.war'
              finalOut = "$BuildName"+'.war'+' '+"${nexustarget}"
              echo "${nexustarget}"
              echo "${finalOut}"

          sh 'curl -v -u "$NexusUserID":"$NexusUserPass" --upload-file '+"${finalOut}"
              }
             }  
        if("$isDockerBuildReq" == 'true')
        {
          stage ('DockerBuild') {
          stageName = 'Application Build Packaging'
           sh """docker build \
           -t ${BuildName.toLowerCase()} \
           --build-arg PORT=$port \
           --build-arg JMXPORT=$jmxport \
           --no-cache ."""
        }
        }
        if("$isDockerPushReq" == 'true')
        {
         stage ('DockerPush') {
         stageName = 'Application Build Packaging'
         sh """docker login -u $NexusUserID -p $NexusUserPass repo.trinityiot.in:8123 && docker tag ${BuildName.toLowerCase()} repo.trinityiot.in:8123/${NexusRepoID.toLowerCase()}/${Artifact_Product.toLowerCase()}/${BuildName.toLowerCase()}:$VERSION && docker push repo.trinityiot.in:8123/${NexusRepoID.toLowerCase()}/${Artifact_Product.toLowerCase()}/${BuildName.toLowerCase()}:$VERSION"""
        }
        }
          currentBuild.result = 'SUCCESS'
          }
           catch (e) { 
            currentBuild.result = 'FAILURE'
              Builderror = "${e}"
              stage ('Report Error Status into JIRA') {
                summarymsg = 'Application '+"${BuildName}"+' Build Failure in ' + "${stageName}" + ' Stage, Please take action Immediatly'
                descriptionmsg = 'Build failure due to ' + "${Builderror}"+' Refer Jenkin Job'+"${env.JOB_NAME}"
                echo "${Builderror}"
                echo "${summarymsg}"
                echo "${descriptionmsg}"
                echo "${JIRAProjecKey}"
                  def issue = [fields: [ project: [key: "${JIRAProjecKey}"],
                      summary:  "${summarymsg}",
                      description: "${descriptionmsg}",
                      issuetype: [name: 'Bug'],
                      assignee: [id: "${JiraDeveloperID}"]]]
                  response = jiraNewIssue issue: issue, site: "${JiraSite}"
                  echo response.successful.toString()
                  echo response.data.toString()
              }
            }
            finally {
              stage ('Updation of Build Status into JIRA') {
                echo currentBuild.result
                jiraSendBuildInfo branch: "${JIRAIssueKey}", site: 'trinitymobilitypvtltd.atlassian.net'
              }
              stage ('Finishing: Sitback and Relax')
              {
              cleanWs() 
              }
              }
  }