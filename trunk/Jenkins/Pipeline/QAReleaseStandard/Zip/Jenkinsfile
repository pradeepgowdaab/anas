node ("$JenkinNodeID")
 {
  try {
        stage ('Code Checkout') {
          checkout([
             $class: 'SubversionSCM',

              additionalCredentials: [],

              excludedCommitMessages: '',

              excludedRegions: '',

              excludedRevprop: '',

              excludedUsers: '',

              filterChangelog: false,

              ignoreDirPropChanges: false,

              includedRegions: '',

                locations: [[cancelProcessOnExternalsFail: true,

                  credentialsId: "$SCM_Cred_ID",

                  depthOption: 'infinity',

                  ignoreExternalsOption: true,

                  local: '.',

                  remote: '$SCM_checkout']],

                quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
          }
          
         def workspace = env.WORKSPACE

        stage ('Package Client Libraries') {
            stageName = 'Package Client Libraries'
            zip archive: true, dir: "$workspace", glob: '', zipFile: "$BuildName"+'.zip'
            }
         if("$NexusRepoReq" == 'true')
		 {
		 stage ('Update Nexus Repo Latest Snapshot') {
		   if("$BuildWithVerNo" == 'true')
              {
              nexustarget = 'http://'+"$NexusUrl"+'/repository/'+"$NexusRepoID"+'/QA/latest/'+"$Artifact_Product"+'/'+"${VERSION}"+'/'+"$BuildName"+'.zip'
              finalOut = "$BuildName"+'.zip'+' '+"${nexustarget}"
              echo "${nexustarget}"
              echo "${finalOut}"

          sh 'curl -v -u "$NexusUserID":"$NexusUserPass" --upload-file '+"${finalOut}"
		  }
        else
              {	  
              nexustarget = 'http://'+"$NexusUrl"+'/repository/'+"$NexusRepoID"+'/QA/latest/'+"$Artifact_Product"+'/'+"$BuildName"+'.zip'
              finalOut = "$BuildName"+'.zip'+' '+"${nexustarget}"
              echo "${nexustarget}"
              echo "${finalOut}"

          sh 'curl -v -u "$NexusUserID":"$NexusUserPass" --upload-file '+"${finalOut}"
          }
		  }
		  }
          currentBuild.result = 'SUCCESS'
          }
           catch (e) { 
            currentBuild.result = 'FAILURE' 
              Builderror = "${e}"
              stage ('Report Error Status into JIRA') {
			  sh '''
			  export ANSIBLE_HOST_KEY_CHECKING=False
			  cd $Notification_Script 
				/usr/bin/ansible-playbook -i fail-hosts site.yml --e smtphost="${smtphost}" -e smtpport="${smtpport}" -e smtpUser="${smtpUser}" -e smtpPass="${smtpPass}" -e to="${API_To}" -e cc="${API_CC}" -e subject="${Fail_EmailSubject}" -e body="${Fail_Emailmessagebody}" -vvvv'''
            
              }
            }
              stage ('Finishing: Sitback and Relax')
              {
              cleanWs() 
              }
              }