node ("$JenkinNodeID")
 {
  try {
        stage ('Code Checkout') {
          checkout([
             $class: 'SubversionSCM',

              additionalCredentials: [],

              excludedCommitMessages: '',

              excludedRegions: '',

              excludedRevprop: '',

              excludedUsers: '',

              filterChangelog: false,

              ignoreDirPropChanges: false,

              includedRegions: '',

                locations: [[cancelProcessOnExternalsFail: true,

                  credentialsId: "$SCM_Cred_ID",

                  depthOption: 'infinity',

                  ignoreExternalsOption: true,

                  local: '.',

                  remote: '$SCM_checkout']],

                quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
          }
         def workspace = env.WORKSPACE
        stage ('npm Dependencies Installation') {
            stageName = 'npm Dependencies Installation'
            sh 'npm install'
             }

        stage ('Complie, Build Client Libraries') {
            stageName = 'Build Execution'
            sh 'npm run ng build BIDataMgmtSSASSLib'
			sh 'npm run ng build BIDataMgmtDWServiceLib'
			sh 'npm run ng build BIDataMgmtSSISLib'
            }
				   echo"$isStaticCodeAnalysisReq"
        if("$isStaticCodeAnalysisReq" == 'true')
       stage ('Static Code Analysis & Coverage Validation') {
            stageName = 'Static Code Analysis'
            withSonarQubeEnv('sonar') {
            sh '''cd ${WORKSPACE} && "$SonarScannerDir" -Dsonar.projectBaseDir="${WORKSPACE}" \
            -Dsonar.projectKey="$sonarprojectName" \
            -Dsonar.projectName="$sonarprojectName" \
            -Dsonar.host.url="$sonarhosturl" \
            -Dsonar.login="$sonarlogin" \
            -Dsonar.password="$sonarpassword" \
            -Dsonar.scm.enabled=true \
            -Dsonar.scm.provider=svn \
            -Dsonar.svn.username="$sonarsvnusername" \
            -Dsonar.svn.password.secured="$sonarsvnpasswordsecured" \
            -Dsonar.exclusions="$sonarexclusions" \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.junit.reportsPath=target/surefire-reports \
            -Dsonar.jacoco.reportPath=target/jacoco.exec \
            -Dsonar.cobertura.reportPath=target/site/jacoco/jacoco.xml'''
          }
          }
	   echo"$isQGValidationReq"
        if("$isQGValidationReq" == 'true')
        stage ('Quality Gate Validation') {
          stageName = 'Quality Gate'
          def qg = waitForQualityGate()
          timeout(time: 1, unit: 'HOURS') {
            echo '$qg'
            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
        }


          if("$NexusRepoReq" == 'true')
              {
        stage ('Update Nexus Repo Latest Snapshot') {
            
			sh'''cd ${WORKSPACE}/dist/BIDataMgmtSSASSLib && \
			npm publish --registry http://192.168.1.143:8081/repository/Trinity_npm'''
			
			sh'''cd /${WORKSPACE}/dist/BIDataMgmtDWServiceLib && \
			npm publish --registry http://192.168.1.143:8081/repository/Trinity_npm'''
			
			sh'''cd ${WORKSPACE}/dist/BIDataMgmtSSISLib && \
			npm publish --registry http://192.168.1.143:8081/repository/Trinity_npm'''
        
          }
              }
          currentBuild.result = 'SUCCESS'
		 stage ('Report success Status into JIRA'){
		  sh '''
		  export ANSIBLE_HOST_KEY_CHECKING=False
		  cd $Notification_Script 
			/usr/bin/ansible-playbook -i hosts site.yml --e smtphost="${smtphost}" -e smtpport="${smtpport}" -e smtpUser="${smtpUser}" -e smtpPass="${smtpPass}" -e to="${API_To}" -e cc="${API_CC}" -e subject="${EmailSubject}" -e body="${Emailmessagebody}" -vvvv'''
		    sh 'curl -v -u $Nexus_Username:$Nexus_Password --upload-file $Zap_Output $Zap_Nexus_Url || error=true'
			sh '''curl -u admin:TrInItY123 http://192.168.1.143:8081/repository/HKPFSAF/Dev/Automation/sonar-cnes-report-3.2.2.jar -o sonar-cnes-report-3.2.2.jar
                  java -jar $ReportJAR -t $SonarSecID -s $SonarQubeUrl -p $SonarProjectID -r $SonarProjectID.docx 
                  curl -v -u admin:TrInItY123 --upload-file *.docx http://$NexusHost/repository/$ProjectID/Dev/StaticAnalysis/$SonarProjectID.docx'''
          }
		  }
          catch (e) { 
            currentBuild.result = 'FAILURE' 
              Builderror = "${e}"
              stage ('Report Error Status into JIRA') {
			  sh '''
			  export ANSIBLE_HOST_KEY_CHECKING=False
			  cd $Notification_Script 
				/usr/bin/ansible-playbook -i fail-hosts site.yml --e smtphost="${smtphost}" -e smtpport="${smtpport}" -e smtpUser="${smtpUser}" -e smtpPass="${smtpPass}" -e to="${API_To}" -e cc="${API_CC}" -e subject="${Fail_EmailSubject}" -e body="${Fail_Emailmessagebody}" -vvvv'''
            
              }
            }
              stage ('Finishing: Sitback and Relax')
              {
              cleanWs() 
              }
              }