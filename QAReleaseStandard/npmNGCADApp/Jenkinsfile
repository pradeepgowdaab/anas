node ("$JenkinNodeID")
 {
  try {
        stage ('Code Checkout') {
          checkout([
             $class: 'SubversionSCM',

              additionalCredentials: [],

              excludedCommitMessages: '',

              excludedRegions: '',

              excludedRevprop: '',

              excludedUsers: '',

              filterChangelog: false,

              ignoreDirPropChanges: false,

              includedRegions: '',

                locations: [[cancelProcessOnExternalsFail: true,

                  credentialsId: "$SCM_Cred_ID",

                  depthOption: 'infinity',

                  ignoreExternalsOption: true,

                  local: '.',

                  remote: '$SCM_checkout']],

                quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
          }

        stage ('npm Dependencies Installation') {
            stageName = 'npm Dependencies Installation'
             sh '''bash
				. ~/.nvm/nvm.sh && . ~/.profile && nvm install $nodejsVersion && \
				npm update "$npmBuildParam" && npm install "$npmBuildParam" && \
                  npm install moment@$momentV && npm install moment-timezone@$momenttimezoneV'''
             }
                                 
             

        stage ('Complie, Build Client Libraries') {
            stageName = 'Build Execution'
             sh '/usr/local/bin/node $max_old_space_size node_modules/@angular/cli/bin/ng build --aot --configuration=production --output-hashing=all --source-map=false --extract-css=true --named-chunks=false --build-optimizer=false'
            }
       stage ('Static Code Analysis & Coverage Validation') {
            stageName = 'Static Code Analysis'
            withSonarQubeEnv('sonar') {
            sh '''cd ${WORKSPACE} && "$SonarScannerDir" -Dsonar.projectBaseDir="${WORKSPACE}" \
            -Dsonar.projectKey="$sonarprojectName" \
            -Dsonar.projectName="$sonarprojectName" \
            -Dsonar.host.url="$sonarhosturl" \
            -Dsonar.login="$sonarlogin" \
            -Dsonar.password="$sonarpassword" \
            -Dsonar.scm.enabled=true \
            -Dsonar.scm.provider=svn \
            -Dsonar.svn.username="$sonarsvnusername" \
            -Dsonar.svn.password.secured="$sonarsvnpasswordsecured" \
            -Dsonar.exclusions="$sonarexclusions" \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.junit.reportsPath=target/surefire-reports \
            -Dsonar.jacoco.reportPath=target/jacoco.exec \
            -Dsonar.cobertura.reportPath=target/site/jacoco/jacoco.xml'''
          }
          }
	   echo"$isQGValidationReq"
        if("$isQGValidationReq" == 'true')
        stage ('Quality Gate Validation') {
          stageName = 'Quality Gate'
          def qg = waitForQualityGate()
          timeout(time: 1, unit: 'HOURS') {
            echo '$qg'
            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
        }


        stage ('Package Client Libraries') {
            stageName = 'Package Client Libraries'
            zip archive: true, dir: 'dist/'+"$BuildName", glob: '', zipFile: "$BuildName"+'.war'
            }
        echo"$isDeploymentReq"
        if("$isDeploymentReq" == 'true')
        {
        stage ('Deployment to QA Environment') {
          stageName = 'Deployment to QA Environment'
          deploy adapters: [tomcat8(credentialsId: "$tomcatToken",
          url: "$tomcatUrl")],
          contextPath: "$contextPath",
          war: '**/*.war'
        }
        }
          if("$NexusRepoReq" == 'true')
              {
        stage ('Update Nexus Repo Latest Snapshot') {

              nexustarget = 'http://'+"$NexusUrl"+'/repository/'+"$NexusRepoID"+'/QA/latest/'+"$Artifact_Product"+'/'+"$BuildName"+'.war'
              finalOut = "$BuildName"+'.war'+' '+"${nexustarget}"
              echo "${nexustarget}"
              echo "${finalOut}"

          sh 'curl -v -u "$NexusUserID":"$NexusUserPass" --upload-file '+"${finalOut}"
          }
              }
          currentBuild.result = 'SUCCESS'
          }
           catch (e) { 
            currentBuild.result = 'FAILURE' 
              Builderror = "${e}"
              stage ('Report Error Status into JIRA') {
			  sh '''
			  export ANSIBLE_HOST_KEY_CHECKING=False
			  cd $Notification_Script 
				/usr/bin/ansible-playbook -i fail-hosts site.yml --e smtphost="${smtphost}" -e smtpport="${smtpport}" -e smtpUser="${smtpUser}" -e smtpPass="${smtpPass}" -e to="${API_To}" -e cc="${API_CC}" -e subject="${Fail_EmailSubject}" -e body="${Fail_Emailmessagebody}" -vvvv'''
            
              }
            }
              stage ('Finishing: Sitback and Relax')
              {
              cleanWs() 
              }
              }