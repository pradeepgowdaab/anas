node ("$JenkinNodeID")
 {
  try {
        stage ('Code Checkout') {
          checkout([
             $class: 'SubversionSCM',
			 
              additionalCredentials: [],

              excludedCommitMessages: '',

              excludedRegions: '',

              excludedRevprop: '',

              excludedUsers: '',

              filterChangelog: false,

              ignoreDirPropChanges: false,

              includedRegions: '',

                locations: [[cancelProcessOnExternalsFail: true,

                  credentialsId: "$SCM_Cred_ID",

                  depthOption: 'infinity',

                  ignoreExternalsOption: true,

                  local: '$BuildName',

                  remote: '$SCM_checkout']],

                quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
          }
          echo"$isVirtuEnvReq"
          if("$isVirtuEnvReq" == 'true')
             {
          stage ('Creating Virtual Env') {
            stageName = 'Creating Virtual Env'
            sh 'alias python=python3'
            sh 'apt-get install python-virtualenv'   
            sh 'python3 -m venv Env'             
            sh '. Env/bin/activate'            
            sh 'cd $BuildName && apt install python-pip'            
            sh 'cd $BuildName && pip install -r requirements.txt'
            sh 'cd $BuildName && pip install pytest-cov'
            sh 'cd $BuildName && pip install pytest-xdist'
            }
            }
          stage ('Unit testing') {
             stageName = 'Unit test Case Execution'
             //sh 'cd $BuildName && apt install python-pip'
             //sh 'pip install pytest-cov && pip install pytest-xdist'
             sh 'alias python=python3 && cd $BuildName &&  pytest --cov=/ unit_test || error=true'
             sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test --cov-report xml'
             sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test --cov-report html'
             //sh 'cd $BuildName && apt install python-pip'
             //sh 'pip install pytest-cov && pip install pytest-xdist'
             sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test || error=true'
             sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test --cov-report xml'
             sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test --cov-report html'
			 sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test || error=true'
            // sh 'alias python=python3 && cd $BuildName && /opt/jenkins/workspace/RnD-trinityIoT-ANALYTIKA/trinityIoT-MLComposer_AnalytikaFlaskService_nightly/Env/bin/python -m pytest --cov=/ unit_test || error=true'
             sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test --cov-report xml'
             sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test --cov-report html'
			 sh 'cd $BuildName && pytest --cov=/ unit_test || error=true'
            // sh 'cd $BuildName && /opt/jenkins/workspace/RnD-trinityIoT-ANALYTIKA/trinityIoT-MLComposer_AnalytikaFlaskService_nightly/Env/bin/python -m pytest --cov=/ unit_test || error=true'
             sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test --cov-report xml'
             sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test --cov-report html'
			 sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test || error=true'
            // sh 'alias python=python3 && cd $BuildName && /opt/jenkins/workspace/RnD-trinityIoT-ANALYTIKA/trinityIoT-MLComposer_AnalytikaFlaskService_nightly/Env/bin/python3 -m pytest --cov=/ unit_test || error=true'
             sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test --cov-report xml'
             sh 'alias python=python3 && cd $BuildName && pytest --cov=/ unit_test --cov-report html'
            }
            echo"$isUnitTCaseEReportReq"
        if("$isUnitTCaseEReportReq" == 'true')
        stage ('Unit test Case Report Exec') {
            stageName = 'Unit test Case ReportExecution'
            sh' zip -r $BuildName.zip coverage.html/'
            sh 'curl -v -u "$NexusUserID":"$NexusUserPass" --upload-file $BuildName.zip http://$NexusHost/repository/$ProjectID/QA/UnitTestingCoverageReport/$BuildName.zip'
            }
         def workspace = env.WORKSPACE
         if("$isStaticReq" == 'true')
         stage ('Static Code Analysis & Coverage Validation') {
            stageName = 'Static Code Analysis'
            withSonarQubeEnv('sonar') {
            sh'''sudo "$sonarscanner" -Dsonar.projectBaseDir=. \
            -Dsonar.projectKey="$sonarprojectName" \
            -Dsonar.projectName="$sonarprojectName" \
            -Dsonar.host.url="$sonarhosturl" \
            -Dsonar.login="$sonarlogin" \
            -Dsonar.password="$sonarpassword" \
            -Dsonar.scm.enabled=true \
            -Dsonar.scm.provider=svn \
            -Dsonar.svn.username="$sonarsvnusername" \
            -Dsonar.svn.password.secured="$sonarsvnpasswordsecured" \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.python.xunit.reportPath=pytest-report.xml \
            -Dsonar.exclusions="$sonarexclusions"'''
          }
          }
         if("$isQGValidationReq" == 'true')
        stage ('Quality Gate Validation') {
          stageName = 'Quality Gate'
          def qg = waitForQualityGate()
          timeout(time: 1, unit: 'HOURS') {
            echo '$qg'
            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
        }
         echo"$isDeploymentReq"
        if("$isDeploymentReq" == 'true')
        {
         stage('Deployment to QA Environment'){
         stage='Deployment to QA Environment'     
         sh'''
         /usr/bin/sshpass -p "$remotepassword" ssh -o StrictHostKeyChecking=no $remoteuser@$remotehost "sudo mkdir -p $tomcatDir/$BuildName/"
          echo $Deployment to QA Environment'''
        sh '''
        sshpass  -p "$remotepassword" scp -r -o StrictHostKeyChecking=no "$BuildName"  "$remoteuser@$remotehost:$tomcatDir/"'''
        sh'''
        /usr/bin/sshpass -p "$remotepassword" ssh -o StrictHostKeyChecking=no $remoteuser@$remotehost "sudo service $ServiceID restart"
        echo $Deployment to QA Environment'''
        }
        }
        stage ('Package Client Libraries') {
            stageName = 'Package Client Libraries'
            zip archive: true, dir: "${WORKSPACE}", glob: '', zipFile: "$BuildName"+'.zip'
            }
        
          if("$NexusRepoReq" == 'true')
              {
        stage ('Update Nexus Repo Latest Snapshot') {

              nexustarget = 'http://'+"$NexusUrl"+'/repository/'+"$NexusRepoID"+'/QA/latest/'+"$Artifact_Product"+'/'+"$BuildName"+'.zip'
              finalOut = "$BuildName"+'.zip'+' '+"${nexustarget}"
              echo "${nexustarget}"
              echo "${finalOut}"
			  
          sh 'curl -v -u "$NexusUserID":"$NexusUserPass" --upload-file '+"${finalOut}"
          }
              }
          currentBuild.result = 'SUCCESS'
          }
           catch (e) { 
            currentBuild.result = 'FAILURE' 
              Builderror = "${e}"
              stage ('Report Error Status into JIRA') {
              sh '''
              export ANSIBLE_HOST_KEY_CHECKING=False
              cd $Notification_Script 
                /usr/bin/ansible-playbook -i fail-hosts site.yml --e smtphost="${smtphost}" -e smtpport="${smtpport}" -e smtpUser="${smtpUser}" -e smtpPass="${smtpPass}" -e to="${API_To}" -e cc="${API_CC}" -e subject="${Fail_EmailSubject}" -e body="${Fail_Emailmessagebody}" -vvvv'''
                sh 'curl -v -u $Nexus_Username:$Nexus_Password --upload-file $Zap_Output $Zap_Nexus_Url || error=true'
                sh '''curl -u admin:TrInItY123 http://192.168.1.143:8081/repository/HKPFSAF/Dev/Automation/sonar-cnes-report-3.2.2.jar -o sonar-cnes-report-3.2.2.jar
                  java -jar $ReportJAR -t $SonarSecID -s $SonarQubeUrl -p $SonarProjectID -r $SonarProjectID.docx  
                  curl -v -u admin:TrInItY123 --upload-file *.docx http://$NexusHost/repository/$ProjectID/Dev/StaticAnalysis/$SonarProjectID.docx'''
                summarymsg = 'Application '+"${AppBuildName}"+' Build Failure in ' + "${stageName}" + ' Stage, Please take action Immediatly'
                descriptionmsg = 'Build failure due to ' + "${Builderror}"+' Refer Jenkin Job'+"${env.JOB_NAME}"
                echo "${Builderror}"
                echo "${summarymsg}"
                echo "${descriptionmsg}"
                echo "${JIRAProjecKey}"
                  def issue = [fields: [ project: [key: "${JIRAProjecKey}"],
                      summary:  "${summarymsg}",
                      description: "${descriptionmsg}",
                      issuetype: [name: 'Bug'],
                      assignee: [id: "${JiraDeveloperID}"]]]
                  response = jiraNewIssue issue: issue, site: "${JiraSite}"
                  echo response.successful.toString()
                  echo response.data.toString()
              }
            }
            finally {
              stage ('Updation of Build Status into JIRA') {
                echo currentBuild.result
                jiraSendBuildInfo branch: "${JIRAIssueKey}", site: 'trinitymobilitypvtltd.atlassian.net'
              }
              stage ('Finishing: Sitback and Relax')
              {
              cleanWs() 
              }
              }
              }