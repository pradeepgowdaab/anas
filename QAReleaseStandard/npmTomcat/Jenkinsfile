node ('$JenkinNodeID') {
  try {
        stage ('Code Checkout') {
          checkout([
             $class: 'SubversionSCM',

              additionalCredentials: [],

              excludedCommitMessages: '',

              excludedRegions: '',

              excludedRevprop: '',

              excludedUsers: '',

              filterChangelog: false,

              ignoreDirPropChanges: false,

              includedRegions: '',

                locations: [[cancelProcessOnExternalsFail: true,

                  credentialsId: "$SCM_Cred_ID",

                  depthOption: 'infinity',

                  ignoreExternalsOption: true,

                  local: '.',

                  remote: '$SCM_checkout']],

                quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
          }

        stage ('npm Dependencies Installation') {
            stageName = 'npm Dependencies Installation'
            sh '''npm install $npmBuildParam
                  npm install -D typescript'''
             }

        stage ('Complie, Build & Package Client Libraries') {
            stageName = 'Build Execution'
            sh 'ng build --prod $ngBuildParam'
            }

        stage ('Static Code Analysis') {
            stageName = 'Static Code Analysis'
            withSonarQubeEnv('sonar') {
            sh '''mvn clean verify sonar:sonar -Dsonar.projectBaseDir=. \
            -Dsonar.projectKey="$sonarprojectName" \
            -Dsonar.projectName="$sonarprojectName" \
            -Dsonar.host.url="$sonarhosturl" \
            -Dsonar.login="$sonarlogin" \
            -Dsonar.password="$sonarpassword" \
            -Dsonar.scm.enabled=true \
            -Dsonar.scm.provider=svn \
            -Dsonar.svn.username="$sonarsvnusername" \
            -Dsonar.svn.password.secured="$sonarsvnpasswordsecured" \
            -Dsonar.exclusions="$sonarexclusions" \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.junit.reportsPath=target/surefire-reports \
            -Dsonar.jacoco.reportPath=target/jacoco.exec \
            -Dsonar.cobertura.reportPath=target/site/jacoco/jacoco.xml
            $sonaradditionalParam'''
          }
          }
          stage ('Quality Gate Validation') {
            def qg = waitForQualityGate()
            stageName = 'Quality Gate'
            timeout(time: 1, unit: 'HOURS') {
              echo "qg"
              if (qg.status != 'OK') {
                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
          }
          stage ('Deployment to QA Environment') {
            stageName = 'Deployment to QA Environment'
            sh '''curl -u $NexusUserID:$NexusUserPass \
            $AnsibleBaseUrl \
            -o $AnsibleScriptID'''
            sh ''' ansible-playbook -i \
            $hostspath $AnsibleScriptID \
            -e tomcatServerName="${tomcatServerName}" \
            -e winServiceID="${winServiceID}" \
            -e ApplicationID="${ApplicationID}" \
            -e dest="${dest}" '''
            sh ''' cd dest/$ApplicationID
            jar cvf $BuildName .
            '''
            }
  
        stage ('Update Nexus Repo Latest Snapshot') {
          sh ("""curl -v -u $NexusUserID:$NexusUserPass \
          --upload-file targer/$BuildName \
          http://$NexusUrl/repository/$NexusRepoID/QA/latest/$Artifact_Product/$BuildName""")
          }
          currentBuild.result = 'SUCCESS'
          }
          catch (err) { 
            currentBuild.result = 'FAILURE' 
            }
            finally {
              stage ('Report the Status into JIRA') {
                     sh '''python /opt/job_jira_creation.py \
                    "${env.JOB_NAME}" \
                    "${env.BUILD_URL}" \
                    "${stage}" \
                    "${currentBuild.result}" \
                    "${JIRA_Prefix}" \
                    "${JIRA_Postfix}" \
                    "${JIRA_Company_Code}" \
                    "${Application_url}"'''
                    }
              stage ('Email Notification') {
                emailext (attachmentsPattern: '**/*.html',
                subject: "Status of IOTHUB-DevSecOps pipeline: ${currentBuild.fullDisplayName}& ${stage}",
                body: """${env.BUILD_URL} has result \
                ${currentBuild.result} & at pipeline stage \
                "${stageName}" \
                And Application url: ${Application_url} \
                and sonarQube Url:${sonarhosturl} \n\n\n\n  \n\n \
                Note:This is an autogenerated mail.\n \
                In case of any clarification Please check with bhargava.t@trinitymobility.com \
                or anas@trinitymobility.com""",
                to: '$emailRecipentID')
                }
              stage ('Sitback and Relax until system Finishing up and Clearing up workspace')
              {
              cleanWs() 
              }
    }
  }