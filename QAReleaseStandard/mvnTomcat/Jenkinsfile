pipeline {
  options { disableConcurrentBuilds() }
  agent { label '$JenkinNodeID' }
  stages {
    try {
        stage ('Code Checkout') {
          stage = 'Code Checkout'
          checkout([
             $class: 'SubversionSCM',

              additionalCredentials: [],

              excludedCommitMessages: '',

              excludedRegions: '',

              excludedRevprop: '',

              excludedUsers: '',

              filterChangelog: false,

              ignoreDirPropChanges: false,

              includedRegions: '',

                locations: [[cancelProcessOnExternalsFail: true,

                  credentialsId: "$SCM_Cred_ID",

                  depthOption: 'infinity',

                  ignoreExternalsOption: true,

                  local: '.',

                  remote: '$SCM_checkout']],

                quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
        }

        stage ('Code Coverage Validation'){

          stage = "Code Coverage"
          sh 'mvn clean verify $MvnGoal'
        }

        Stage ('Unit test Case Execution')
        {
          Stage = "Unit test Case Execution"
          sh 'mvn test $MvnGoal'
        }

        Stage ('Static Code Analysis')
        {
          withSonarQubeEnv('sonar') {
          stage = "Static Code Analysis"
          sh '''mvn clean package sonar:sonar -Dsonar.projectBaseDir=. -Dsonar.projectKey="$sonarprojectName" \
            -Dsonar.projectName="$sonarprojectName" \
            -Dsonar.host.url="$sonarhosturl" \
            -Dsonar.login="$sonarlogin" \
            -Dsonar.password="$sonarpassword" \
            -Dsonar.scm.enabled=true \
            -Dsonar.scm.provider=svn \
            -Dsonar.svn.username="$sonarsvnusername" \
            -Dsonar.svn.password.secured="$sonarsvnpasswordsecured" \
            -Dsonar.exclusions="$sonarexclusions" \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.junit.reportsPath=target/surefire-reports \
            -Dsonar.jacoco.reportPath=target/jacoco.exec \
            -Dsonar.cobertura.reportPath=target/site/jacoco/jacoco.xml
            $sonaradditionalParam'''
        }
        }

        stage ('Quality Gate Validation')
        {
          stage = "Quality Gate"
          timeout(time: 1, unit: 'HOURS') {
            def qg = waitForQualityGate()
            echo "qg"
            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
          }
        }
        stage ('Application Packaging')
        {
          stage = "Application Packaging"
          sh 'mvn clean package -DskipTests=true'
        }
        stage ('Deployment to QA Environment')
        {
          stage = "Deploy to QA Environment"
          deploy adapters: [tomcat8(credentialsId: '$tomcatToken',
          path: ''
          url: "$tomcatUrl")],
          contextPath: null,
          war: '**/*.war'
        }

        stage ('Update Nexus Repo Latest Snapshot')
        {
          stage = "Update Nexus Repo Latest Snapshot"
          sh ("""curl -v -u $NexusUserID:$NexusUserPass \
          --upload-file targer/$BuildName \
          http://$NexusUrl/repository/$NexusRepoID/QA/latest/$Artifact_Product/$BuildName""")

        }
    }
  }
  post {
    always {
      stages{
        stage ("Clean Workspace")
        {
          steps{
            cleanWs()
            emailext (
        attachmentsPattern: '**/*.html',

        subject: "Status of IOTHUB-DevSecOps pipeline: ${currentBuild.fullDisplayName}& ${stage}",

        body: """${env.BUILD_URL} has result \
        ${currentBuild.result} & at pipeline stage \
        "${stage}" \
        And Application url: ${Application_url} \
        and sonarQube Url:${Sonarqube_url} \n\n\n\n  \n\n \
        Note:This is an autogenerated mail.\n \
        In case of any clarification Please check with bhargava.t@trinitymobility.com \
        or anas@trinitymobility.com""",

        to: '$emailID'
         )
          }
        }
      }
    }
    failure {
     sh '''python /opt/job_jira_creation.py \
     "${env.JOB_NAME}" \
     "${env.BUILD_URL}" \
     "${stage}" \
     "Failure" \
     "${JIRA_Prefix}" \
     "${JIRA_Postfix}" \
     "${JIRA_Company_Code}" \
     "${Application_url}"'''
    }
    success {
     sh '''python /opt/job_jira_creation.py \
     "${env.JOB_NAME}" \
     "${env.BUILD_URL}" \
     "${stage}" \
     "success" \
     "${JIRA_Prefix}" \
     "${JIRA_Postfix}" \
     "${JIRA_Company_Code}" \
     "${Application_url}"'''
    }
  }
}