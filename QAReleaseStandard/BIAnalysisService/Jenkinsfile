node ("$JenkinNodeID") {
  try {
        stage ('Code Checkout') {
          /* groovylint-disable-next-line TrailingComma */
          checkout([
             $class: 'SubversionSCM',

              additionalCredentials: [],

              excludedCommitMessages: '',

              excludedRegions: '',

              excludedRevprop: '',

              excludedUsers: '',

              filterChangelog: false,

              ignoreDirPropChanges: false,

              includedRegions: '',

                locations: [[cancelProcessOnExternalsFail: true,

                  credentialsId: "$SCM_Cred_ID",

                  depthOption: 'infinity',

                  ignoreExternalsOption: true,

                  local: '.',

                  remote: '$SCM_checkout']],

                quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
          }
          def workspace = env.WORKSPACE
		  
          stage ('Application Build Packaging') {
          stageName = 'Application Build Packaging'
          sh 'dotnet publish'
          }
        stage ('Package Client Libraries') {
            stageName = 'Package Client Libraries'
            zip archive: true, dir: "$workspace", glob: '', zipFile: "$BuildName"+'.zip'
            }
			echo"$isLinuxDeploymentReq"
        if("$isLinuxDeploymentReq" == 'true')
        {
	   stage ('Deployment to QA Environment') {
          stageName = 'Deployment to QA Environment'
		sh '''/usr/bin/sshpass  -p "$remotepassword" scp -r -o StrictHostKeyChecking=no "$AppBuildName"  "$remoteuser@$remotehost:$BIEngineDir/"'''
		sh '''/usr/bin/sshpass -p "$remotepassword" ssh -o StrictHostKeyChecking=no $remoteuser@$remotehost "sudo kill -9 $(lsof -t -i:$httpport) || error=true ; sudo kill -9 $(lsof -t -i:$httpsport) || error=true"'''
        sh '''/usr/bin/sshpass -p "$remotepassword" ssh -o StrictHostKeyChecking=no $remoteuser@$remotehost "cd $BIEngineDir/$AppBuildName/ ; nohup dotnet run & "'''
 }
 }
        if("$NexusRepoReq" == 'true')
              {
        stage ('Update Nexus Repo Latest Snapshot') {

              nexustarget = 'http://'+"$NexusUrl"+'/repository/'+"$NexusRepoID"+'/QA/latest/'+"$Artifact_Product"+'/'+"$BuildName"+'.zip'
              finalOut = "$BuildName"+'.zip'+' '+"${nexustarget}"
              echo "${nexustarget}"
              echo "${finalOut}"

          sh 'curl -v -u "$NexusUserID":"$NexusUserPass" --upload-file '+"${finalOut}"
          }
              }
			  echo"$isWindowsDeploymentReq"
        if("$isWindowsDeploymentReq" == 'true')
        {
	   stage ('Deployment to QA Environment') {
          stageName = 'Deployment to QA Environment'
		sh '''
		/usr/bin/ansible-playbook -i $hostspath $ansibleplaybook --e TargetMachine="${TargetMachine}" -e ansible_user="${ansible_user}" -e ansible_password="${ansible_password}"  -e BIEngine_drive="${BIEngine_drive}" -e BIEngine_Directory="${BIEngine_Directory}" -e NexusUrl="${NexusUrl}"  -e NexusUser="${NexusUserID}" -e Password="${NexusUserPass}" -e BuildName="${BuildName}" -e Artifact_Product="${Artifact_Product}" -e NexusRepoID="${NexusRepoID}" -e Serviceport="${Serviceport}" -e testasync="${testasync}" -e testpoll="${testpoll}" -vvvv'''
 }
 }
			  
          currentBuild.result = 'SUCCESS'
          }
          catch (e) { 
            currentBuild.result = 'FAILURE'
              Builderror = "${e}"
              stage ('Report Error Status into JIRA') {
              /*  summarymsg = 'Application '+"${AppBuildName}"+' Build Failure in ' + "${stageName}" + ' Stage, Please take action Immediatly'
                descriptionmsg = 'Build failure due to ' + "${Builderror}"+' Refer Jenkin Job'+"${env.JOB_NAME}"
                echo "${Builderror}"
                echo "${summarymsg}"
                echo "${descriptionmsg}"
                echo "${JIRAProjecKey}"
                  def issue = [fields: [ project: [key: "${JIRAProjecKey}"],
                      summary:  "${summarymsg}",
                      description: "${descriptionmsg}",
                      issuetype: [name: 'Bug'],
                      assignee: [id: "${JiraDeveloperID}"]]]
                  response = jiraNewIssue issue: issue, site: "${JiraSite}"
                  echo response.successful.toString()
                  echo response.data.toString()
				  */
				  }			  
            }
              stage ('Finishing: Sitback and Relax')
              {
              cleanWs() 
              }
              }
			  