node ('jenkins-slave-01') {
  try {
    stage ('Code Checkout') {
      stage = '${STAGE_NAME}'
      checkout([
      $class: 'SubversionSCM',
      additionalCredentials: [],
      excludedCommitMessages: '',
      excludedRegions: '',
      excludedRevprop: '',
      excludedUsers: '',
      filterChangelog: false,
      ignoreDirPropChanges: false,
      includedRegions: '',
      locations: [[cancelProcessOnExternalsFail: true, 
        credentialsId: "$SCM_Cred_ID", 
        depthOption: 'infinity', 
        ignoreExternalsOption: true, 
        local: '.', 
        remote: '$SCM_checkout']], 
      quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
    }
  stage('SonarQube analysis') {
    withSonarQubeEnv('sonar') {
      sh 'mvn clean package sonar:sonar -Dsonar.projectBaseDir=. -Dsonar.projectKey="$sonarprojectName"  -Dsonar.projectName="$sonarprojectName" -Dsonar.host.url="$sonarhosturl" -Dsonar.login="$sonarlogin" -Dsonar.password="$sonarpassword" -Dsonar.scm.enabled=true -Dsonar.scm.provider=svn -Dsonar.svn.username="$sonarsvnusername" -Dsonar.svn.password.secured="$sonarsvnpasswordsecured" -Dsonar.sources=src -Dsonar.exclusions="$sonarexclusions" -Dsonar.java.binaries=target/classes -Dsonar.java.binaries=target/classes -Dsonar.junit.reportsPath=target/surefire-reports -Dsonar.jacoco.reportPath=target/jacoco.exec -Dsonar.cobertura.reportPath=target/site/jacoco/jacoco.xml' 
    } // submitted SonarQube taskId is automatically attached to the pipeline context
  }
}
  
// No need to occupy a node
stage("Quality Gate"){
  //timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    echo "qg"
	if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
    }
  }
}

